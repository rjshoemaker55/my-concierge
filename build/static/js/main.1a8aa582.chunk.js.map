{"version":3,"sources":["components/FormQuestion/index.js","loadResults.js","screens/Landing/index.js","App.js","serviceWorker.js","index.js"],"names":["FormQuestion","props","className","mainHeader","secHeader","onSubmit","type","name","value","onChange","loadResults","require","items","console","log","Landing","useState","firstName","setFirstName","destCity","setDestCity","originCity","setOriginCity","depDate","setDepDate","returnDate","setReturnDate","questionNumber","setQuestionNumber","showModal","setShowModal","questionList","currentQuestion","handleSubmit","e","a","preventDefault","handleFinish","target","Modal","show","Header","Title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAsBeA,G,MAlBM,SAAAC,GACnB,OACE,yBAAKC,UAAU,iBACb,wBAAIA,UAAU,gBAAgBD,EAAME,YACpC,wBAAID,UAAU,eAAeD,EAAMG,WACnC,0BAAMC,SAAUJ,EAAMI,UACpB,2BACEH,UAAU,QACVI,KAAK,OACLC,KAAMN,EAAMM,KACZC,MAAOP,EAAMO,MACbC,SAAUR,EAAMQ,eCTXC,GANDC,EAAQ,IAEF,SAAAC,GAClBC,QAAQC,IAAIF,KCuHCG,G,MAjHC,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACbC,EADa,KACFC,EADE,OAEYF,mBAAS,IAFrB,mBAEbG,EAFa,KAEHC,EAFG,OAGgBJ,mBAAS,IAHzB,mBAGbK,EAHa,KAGDC,EAHC,OAIUN,mBAAS,IAJnB,mBAIbO,EAJa,KAIJC,EAJI,OAKgBR,mBAAS,IALzB,mBAKbS,EALa,KAKDC,EALC,OAMwBV,mBAAS,GANjC,mBAMbW,EANa,KAMGC,EANH,OAOcZ,oBAAS,GAPvB,mBAOba,EAPa,KAOFC,EAPE,KASdC,EAAe,CACnB,CACE5B,WACE,8BACE,0BAAMD,UAAU,aAAhB,cADF,kBAIFE,UAAU,0BACVG,KAAM,YACNC,MAAOS,GAET,CACEd,WAAW,SAAD,OAAWc,EAAX,KACVb,UAAU,wCACVG,KAAM,WACNC,MAAOW,GAET,CACEhB,WACE,qCACOgB,EADP,KACkB,0BAAMjB,UAAU,aAAhB,kBAGpBE,UAAU,yDACVG,KAAM,aACNC,MAAOa,GAET,CACElB,WAAW,WAAD,OAAakB,EAAb,eAA8BF,EAA9B,KACVf,UAAU,wBACVG,KAAM,UACNC,MAAOe,GAET,CACEpB,WAAY,aACZC,UAAU,8BACVG,KAAM,aACNC,MAAOiB,IAIPO,EAAkBD,EAAaJ,GAsB7BM,EAAY,uCAAG,WAAMC,GAAN,SAAAC,EAAA,yDACnBD,EAAEE,iBAEqB,IAAnBT,EAHe,yCAIVU,KAJU,uBAObT,EAAkBD,EAAiB,GAPtB,OAQnBK,EAAkBD,EAAaJ,GARZ,2CAAH,sDAWZU,EAAe,WACnBP,GAAa,GACbpB,EAAY,CACVO,YACAE,WACAE,aACAE,UACAE,gBAIJ,OACE,yBAAKvB,UAAU,YACb,kBAAC,EAAD,CACEC,WAAY6B,EAAgB7B,WAC5BC,UAAW4B,EAAgB5B,UAC3BG,KAAMyB,EAAgBzB,KACtBE,SAhDe,SAAAyB,GACnB,OAAQA,EAAEI,OAAO/B,MACf,IAAK,YACHW,EAAagB,EAAEI,OAAO9B,OACtB,MACF,IAAK,WACHY,EAAYc,EAAEI,OAAO9B,OACrB,MACF,IAAK,aACHc,EAAcY,EAAEI,OAAO9B,OACvB,MACF,IAAK,UACHgB,EAAWU,EAAEI,OAAO9B,OACpB,MACF,IAAK,aACHkB,EAAcQ,EAAEI,OAAO9B,SAkCvBH,SAAU4B,EACVzB,MAAOwB,EAAgBxB,QAEzB,kBAAC+B,EAAA,EAAD,CAAOC,KAAMX,GACX,kBAACU,EAAA,EAAME,OAAP,KACE,kBAACF,EAAA,EAAMG,MAAP,uD,MCzGKC,MAJf,WACE,OAAO,kBAAC,EAAD,OCKWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1a8aa582.chunk.js","sourcesContent":["import React from 'react';\n\nimport './styles.css';\n\nconst FormQuestion = props => {\n  return (\n    <div className='input-wrapper'>\n      <h1 className='main-heading'>{props.mainHeader}</h1>\n      <h2 className='sec-heading'>{props.secHeader}</h2>\n      <form onSubmit={props.onSubmit}>\n        <input\n          className='input'\n          type='text'\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default FormQuestion;\n","const axios = require('axios');\n\nconst loadResults = items => {\n  console.log(items);\n};\n\nexport default loadResults;\n","import React, { useState } from 'react';\nimport { Modal } from 'react-bootstrap';\n\nimport FormQuestion from '../../components/FormQuestion';\n\nimport loadResults from '../../loadResults';\n\nimport './styles.css';\n\nconst Landing = () => {\n  const [firstName, setFirstName] = useState('');\n  const [destCity, setDestCity] = useState('');\n  const [originCity, setOriginCity] = useState('');\n  const [depDate, setDepDate] = useState('');\n  const [returnDate, setReturnDate] = useState('');\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n\n  const questionList = [\n    {\n      mainHeader: (\n        <span>\n          <span className='small-sec'>welcome to</span> My Concierge.\n        </span>\n      ),\n      secHeader: `What's your first name?`,\n      name: 'firstName',\n      value: firstName\n    },\n    {\n      mainHeader: `Hello ${firstName}!`,\n      secHeader: `Where are you headed? (city, country)`,\n      name: 'destCity',\n      value: destCity\n    },\n    {\n      mainHeader: (\n        <span>\n          Ahh {destCity}, <span className='small-sec'>great choice!</span>\n        </span>\n      ),\n      secHeader: `Where are you leaving from? (city, country of airport)`,\n      name: 'originCity',\n      value: originCity\n    },\n    {\n      mainHeader: `Got it. ${originCity} to ${destCity}.`,\n      secHeader: `When are you leaving?`,\n      name: 'depDate',\n      value: depDate\n    },\n    {\n      mainHeader: 'Last step!',\n      secHeader: `When will you be returning?`,\n      name: 'returnDate',\n      value: returnDate\n    }\n  ];\n\n  let currentQuestion = questionList[questionNumber];\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'firstName':\n        setFirstName(e.target.value);\n        break;\n      case 'destCity':\n        setDestCity(e.target.value);\n        break;\n      case 'originCity':\n        setOriginCity(e.target.value);\n        break;\n      case 'depDate':\n        setDepDate(e.target.value);\n        break;\n      case 'returnDate':\n        setReturnDate(e.target.value);\n        break;\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (questionNumber === 4) {\n      return handleFinish();\n    }\n\n    await setQuestionNumber(questionNumber + 1);\n    currentQuestion = questionList[questionNumber];\n  };\n\n  const handleFinish = () => {\n    setShowModal(true);\n    loadResults({\n      firstName,\n      destCity,\n      originCity,\n      depDate,\n      returnDate\n    });\n  };\n\n  return (\n    <div className='main-div'>\n      <FormQuestion\n        mainHeader={currentQuestion.mainHeader}\n        secHeader={currentQuestion.secHeader}\n        name={currentQuestion.name}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n        value={currentQuestion.value}\n      />\n      <Modal show={showModal}>\n        <Modal.Header>\n          <Modal.Title>Please wait while we load your results...</Modal.Title>\n        </Modal.Header>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Landing;\n","import React from 'react';\n\nimport Landing from './screens/Landing';\n\nimport './App.css';\n\nfunction App() {\n  return <Landing />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}