{"version":3,"sources":["components/FormQuestion/index.js","loadResults.js","screens/Landing/index.js","components/FlightDisplay/index.js","screens/Results/index.js","App.js","serviceWorker.js","index.js"],"names":["FormQuestion","props","className","mainHeader","secHeader","onSubmit","type","name","value","onChange","axios","require","loadResults","items","Promise","resolve","reject","originCityId","destCityId","originCityName","destCityName","firstName","destCity","originCity","depDate","returnDate","getDestCityId","method","url","headers","params","query","then","response","data","Places","PlaceId","PlaceName","searchFlights","catch","error","console","log","Landing","history","useHistory","useState","setFirstName","setDestCity","setOriginCity","setDepDate","setReturnDate","questionNumber","setQuestionNumber","showModal","setShowModal","questionList","currentQuestion","handleSubmit","e","a","preventDefault","handleFinish","res","push","pathname","state","target","Modal","show","Header","Title","FlightDisplay","airline","flightNumber","src","airlineLogo","depTime","arriveTime","duration","flightList","flights","Results","location","Container","id","Row","Col","map","flight","key","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d4f15fb.chunk.js","sourcesContent":["import React from 'react';\n\nimport './styles.css';\n\nconst FormQuestion = props => {\n  return (\n    <div className='input-wrapper'>\n      <h1 className='main-heading'>{props.mainHeader}</h1>\n      <h2 className='sec-heading'>{props.secHeader}</h2>\n      <form onSubmit={props.onSubmit}>\n        <input\n          className='input'\n          type='text'\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default FormQuestion;\n","const axios = require('axios');\n\nconst loadResults = items => {\n  return new Promise((resolve, reject) => {\n    const { firstName, destCity, originCity, depDate, returnDate } = items;\n\n    let originCityId;\n    let destCityId;\n    let originCityName;\n    let destCityName;\n\n    const getOriginCityId = () => {\n      axios({\n        method: 'GET',\n        url:\n          'https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/UK/GBP/en-GB/',\n        headers: {\n          'content-type': 'application/octet-stream',\n          'x-rapidapi-host':\n            'skyscanner-skyscanner-flight-search-v1.p.rapidapi.com',\n          'x-rapidapi-key': '2f3a0e5559mshf0b9a7a94324ff7p1bf4dajsna06e1715474c'\n        },\n        params: {\n          query: originCity\n        }\n      })\n        .then(response => {\n          originCityId = response.data.Places[0].PlaceId;\n          originCityName = response.data.Places[0].PlaceName;\n          getDestCityId();\n        })\n        .catch(error => {\n          console.log(error);\n          reject(error);\n        });\n    };\n\n    const getDestCityId = () => {\n      axios({\n        method: 'GET',\n        url:\n          'https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/UK/GBP/en-GB/',\n        headers: {\n          'content-type': 'application/octet-stream',\n          'x-rapidapi-host':\n            'skyscanner-skyscanner-flight-search-v1.p.rapidapi.com',\n          'x-rapidapi-key': '2f3a0e5559mshf0b9a7a94324ff7p1bf4dajsna06e1715474c'\n        },\n        params: {\n          query: destCity\n        }\n      })\n        .then(response => {\n          destCityId = response.data.Places[0].PlaceId;\n          destCityName = response.data.Places[0].PlaceName;\n          searchFlights();\n        })\n        .catch(error => {\n          console.log(error);\n          reject(error);\n        });\n    };\n\n    const searchFlights = () => {\n      const returnObj = {\n        firstName,\n        originCityId,\n        originCityName,\n        destCityId,\n        destCityName,\n        depDate,\n        returnDate\n      };\n\n      resolve(returnObj);\n\n      // Getting 500 error from the below request, inserting dummy data instead of response for now\n\n      // axios({\n      //   method: 'POST',\n      //   url:\n      //     'https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/pricing/v1.0',\n      //   headers: {\n      //     'content-type': 'application/x-www-form-urlencoded',\n      //     'x-rapidapi-host':\n      //       'skyscanner-skyscanner-flight-search-v1.p.rapidapi.com',\n      //     'x-rapidapi-key': '2f3a0e5559mshf0b9a7a94324ff7p1bf4dajsna06e1715474c'\n      //   },\n      //   data: {\n      //     inboundDate: '2019-12-15',\n      //     cabinClass: 'business',\n      //     children: '0',\n      //     infants: '0',\n      //     country: 'US',\n      //     currency: 'USD',\n      //     locale: 'en-US',\n      //     originPlace: 'EWR-sky',\n      //     destinationPlace: 'HOUA-sky',\n      //     outboundDate: '2019-12-12',\n      //     adults: '1'\n      //   }\n      // })\n      //   .then(response => {\n      //     console.log(response);\n      //   })\n      //   .catch(error => {\n      //     console.log(error);\n      //   });\n    };\n\n    getOriginCityId();\n  });\n};\n\nexport default loadResults;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { BrowserHistory } from 'react-router';\nimport { Modal } from 'react-bootstrap';\n\nimport FormQuestion from '../../components/FormQuestion';\n\nimport loadResults from '../../loadResults';\n\nimport './styles.css';\n\nconst Landing = () => {\n  let history = useHistory();\n  const [firstName, setFirstName] = useState('');\n  const [destCity, setDestCity] = useState('');\n  const [originCity, setOriginCity] = useState('');\n  const [depDate, setDepDate] = useState('');\n  const [returnDate, setReturnDate] = useState('');\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n\n  const questionList = [\n    {\n      mainHeader: (\n        <span>\n          <span className='small-sec'>welcome to</span> My Concierge.\n        </span>\n      ),\n      secHeader: `What's your first name?`,\n      name: 'firstName',\n      value: firstName\n    },\n    {\n      mainHeader: `Hello ${firstName}!`,\n      secHeader: `Where are you headed? (city of airport)`,\n      name: 'destCity',\n      value: destCity\n    },\n    {\n      mainHeader: (\n        <span>\n          Ahh {destCity}, <span className='small-sec'>great choice!</span>\n        </span>\n      ),\n      secHeader: `Where are you leaving from? (city of airport)`,\n      name: 'originCity',\n      value: originCity\n    },\n    {\n      mainHeader: `Got it. ${originCity} to ${destCity}.`,\n      secHeader: `When are you leaving (YYYY-MM-DD)?`,\n      name: 'depDate',\n      value: depDate\n    },\n    {\n      mainHeader: 'Last step!',\n      secHeader: `When will you be returning (YYYY-MM-DD)?`,\n      name: 'returnDate',\n      value: returnDate\n    }\n  ];\n\n  let currentQuestion = questionList[questionNumber];\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'firstName':\n        setFirstName(e.target.value);\n        break;\n      case 'destCity':\n        setDestCity(e.target.value);\n        break;\n      case 'originCity':\n        setOriginCity(e.target.value);\n        break;\n      case 'depDate':\n        setDepDate(e.target.value);\n        break;\n      case 'returnDate':\n        setReturnDate(e.target.value);\n        break;\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (questionNumber === 4) {\n      return handleFinish();\n    }\n\n    await setQuestionNumber(questionNumber + 1);\n    currentQuestion = questionList[questionNumber];\n  };\n\n  const handleFinish = () => {\n    setShowModal(true);\n    loadResults({\n      firstName,\n      destCity,\n      originCity,\n      depDate,\n      returnDate\n    }).then(res => {\n      history.push({\n        pathname: '/results',\n        state: res\n      });\n    });\n  };\n\n  return (\n    <div className='main-div'>\n      <FormQuestion\n        mainHeader={currentQuestion.mainHeader}\n        secHeader={currentQuestion.secHeader}\n        name={currentQuestion.name}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n        value={currentQuestion.value}\n      />\n      <Modal show={showModal}>\n        <Modal.Header>\n          <Modal.Title>Please wait while we load your results...</Modal.Title>\n        </Modal.Header>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Landing;\n","import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport './styles.css';\n\nconst FlightDisplay = props => {\n  return (\n    <div className='flight-display-wrapper'>\n      <div className='flight-display-header'>\n        {props.airline} {props.flightNumber}\n      </div>\n      <div className='flight-info-wrapper'>\n        <img src={props.airlineLogo} className='airline-logo' />\n        <div className='flight-info'>\n          <div>\n            <span className='font-weight-bold'>Departure Time:</span>{' '}\n            {props.depTime}\n          </div>\n          <div>\n            <span className='font-weight-bold'>Arrival Time:</span>{' '}\n            {props.arriveTime}\n          </div>\n          <div>\n            <span className='font-weight-bold'>Duration:</span> {props.duration}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FlightDisplay;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport FlightDisplay from '../../components/FlightDisplay';\nimport './styles.css';\n\nconst flightList = require('../../flightList.json').flights;\n\nconsole.log(flightList);\n\nconst Results = props => {\n  const {\n    firstName,\n    originCityId,\n    originCityName,\n    destCityId,\n    destCityName,\n    depDate,\n    returnDate\n  } = props.location.state;\n\n  return (\n    <>\n      <Container>\n        <Container id='results-page-wrapper'>\n          <h1 id='results-header'>\n            You're all set for a great trip, {firstName}!\n          </h1>\n          <div className='divider'></div>\n          <Row id='trip-info-wrapper'>\n            <Col>\n              <div className='trip-info-section'>\n                Origin: {props.originCityName}\n                <span className='font-weight-bold'>{originCityName}</span>\n              </div>\n            </Col>\n            <Col>\n              <div className='trip-info-section'>\n                Destination: {props.destCityName}\n                <span className='font-weight-bold'>{destCityName}</span>\n              </div>\n            </Col>\n            <Col>\n              <div className='trip-info-section'>\n                Date of Departure: {props.depDate}\n                <span className='font-weight-bold'>{depDate}</span>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col className='flight-hotel-wrapper'>\n              <h2 className='flight-hotel-header'>Flights</h2>\n              {flightList.map(flight => (\n                <FlightDisplay\n                  depTime={flight.depTime}\n                  arriveTime={flight.arriveTime}\n                  duration={flight.duration}\n                  airline={flight.airline}\n                  airlineLogo={flight.airlineLogo}\n                  flightNumber={flight.flightNumber}\n                  key={flight.flightNumber}\n                />\n              ))}\n            </Col>\n            <Col className='flight-hotel-wrapper'>\n              <h2 className='flight-hotel-header'>Hotels</h2>\n              <div id='to-be-added'>to be added...</div>\n            </Col>\n          </Row>\n        </Container>\n        <div className='my-concierge-footer'>my concierge</div>\n      </Container>\n    </>\n  );\n};\n\nexport default Results;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Landing from './screens/Landing';\nimport Results from './screens/Results';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/' component={Landing} />\n        <Route exact path='/results' component={Results} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}