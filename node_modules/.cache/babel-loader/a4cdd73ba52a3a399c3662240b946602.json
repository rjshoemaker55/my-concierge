{"ast":null,"code":"import _slicedToArray from \"/Users/rjshoemaker/Desktop/Stuff/code/projects/myconcierge/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rjshoemaker/Desktop/Stuff/code/projects/myconcierge/client/src/screens/Landing/index.js\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { BrowserHistory } from 'react-router';\nimport { Modal } from 'react-bootstrap';\nimport Navbar from '../../components/Navbar';\nimport { loadResults } from '../../loadResults';\nimport Results from '../Results/index';\nimport FormQuestion from '../../components/FormQuestion';\nimport './styles.css';\n\nconst Landing = () => {\n  let history = useHistory();\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        firstName = _useState2[0],\n        setFirstName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        destCity = _useState4[0],\n        setDestCity = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        arriveDate = _useState6[0],\n        setArriveDate = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        numberNights = _useState8[0],\n        setNumberNights = _useState8[1];\n\n  const _useState9 = useState(0),\n        _useState10 = _slicedToArray(_useState9, 2),\n        questionNumber = _useState10[0],\n        setQuestionNumber = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        showModal = _useState12[0],\n        setShowModal = _useState12[1];\n\n  const questionList = [{\n    mainHeader: React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"small-sec\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"welcome to\"), \" My Concierge.\"),\n    secHeader: \"What's your first name?\",\n    name: 'firstName',\n    value: firstName\n  }, {\n    mainHeader: \"Hello \".concat(firstName, \"!\"),\n    secHeader: \"Where are you headed? (city name)\",\n    name: 'destCity',\n    value: destCity\n  }, {\n    mainHeader: React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Ahh \", destCity, \", \", React.createElement(\"span\", {\n      className: \"small-sec\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"great choice!\")),\n    secHeader: \"When will you be arriving (YYYY-MM-DD)?\",\n    name: 'arriveDate',\n    value: arriveDate\n  }, {\n    mainHeader: 'Last step!',\n    secHeader: \"Alright, and how many nights will you be staying?\",\n    name: 'numberNights',\n    value: numberNights\n  }]; // Sets current question to the question data with index of question number in state\n\n  let currentQuestion = questionList[questionNumber]; // Sets data in state based on input changes\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'firstName':\n        setFirstName(e.target.value);\n        break;\n\n      case 'destCity':\n        setDestCity(e.target.value);\n        break;\n\n      case 'arriveDate':\n        setArriveDate(e.target.value);\n        break;\n\n      case 'numberNights':\n        setNumberNights(e.target.value);\n        break;\n    }\n  }; // Initiates handleFinish if all questions have been answereed\n  // If not, icreases question number by 1, and sets the currentQuestion so the displayed question changes\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (questionNumber === 3) {\n      return handleFinish();\n    }\n\n    await setQuestionNumber(questionNumber + 1);\n    currentQuestion = questionList[questionNumber];\n  }; // Calls loadResults function with all input data, then redirects to results page and sends the response as props\n\n\n  const handleFinish = async () => {\n    setShowModal(true);\n    let hotelList = await loadResults({\n      firstName,\n      destCity,\n      arriveDate,\n      numberNights\n    });\n    history.push({\n      pathname: '/results',\n      state: {\n        hotelList\n      }\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"landing-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(FormQuestion, {\n    mainHeader: currentQuestion.mainHeader,\n    secHeader: currentQuestion.secHeader,\n    name: currentQuestion.name,\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n    value: currentQuestion.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(Modal, {\n    show: showModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Modal.Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Please wait while we load your results...\"))));\n};\n\nexport default Landing;","map":{"version":3,"sources":["/Users/rjshoemaker/Desktop/Stuff/code/projects/myconcierge/client/src/screens/Landing/index.js"],"names":["React","useState","useHistory","BrowserHistory","Modal","Navbar","loadResults","Results","FormQuestion","Landing","history","firstName","setFirstName","destCity","setDestCity","arriveDate","setArriveDate","numberNights","setNumberNights","questionNumber","setQuestionNumber","showModal","setShowModal","questionList","mainHeader","secHeader","name","value","currentQuestion","handleChange","e","target","handleSubmit","preventDefault","handleFinish","hotelList","push","pathname","state"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { BrowserHistory } from 'react-router';\nimport { Modal } from 'react-bootstrap';\nimport Navbar from '../../components/Navbar';\nimport { loadResults } from '../../loadResults';\nimport Results from '../Results/index';\nimport FormQuestion from '../../components/FormQuestion';\nimport './styles.css';\n\nconst Landing = () => {\n  let history = useHistory();\n  const [firstName, setFirstName] = useState('');\n  const [destCity, setDestCity] = useState('');\n  const [arriveDate, setArriveDate] = useState('');\n  const [numberNights, setNumberNights] = useState('');\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n\n  const questionList = [\n    {\n      mainHeader: (\n        <span>\n          <span className='small-sec'>welcome to</span> My Concierge.\n        </span>\n      ),\n      secHeader: `What's your first name?`,\n      name: 'firstName',\n      value: firstName,\n    },\n    {\n      mainHeader: `Hello ${firstName}!`,\n      secHeader: `Where are you headed? (city name)`,\n      name: 'destCity',\n      value: destCity,\n    },\n    {\n      mainHeader: (\n        <span>\n          Ahh {destCity}, <span className='small-sec'>great choice!</span>\n        </span>\n      ),\n      secHeader: `When will you be arriving (YYYY-MM-DD)?`,\n      name: 'arriveDate',\n      value: arriveDate,\n    },\n    {\n      mainHeader: 'Last step!',\n      secHeader: `Alright, and how many nights will you be staying?`,\n      name: 'numberNights',\n      value: numberNights,\n    },\n  ];\n\n  // Sets current question to the question data with index of question number in state\n  let currentQuestion = questionList[questionNumber];\n\n  // Sets data in state based on input changes\n  const handleChange = (e) => {\n    switch (e.target.name) {\n      case 'firstName':\n        setFirstName(e.target.value);\n        break;\n      case 'destCity':\n        setDestCity(e.target.value);\n        break;\n      case 'arriveDate':\n        setArriveDate(e.target.value);\n        break;\n      case 'numberNights':\n        setNumberNights(e.target.value);\n        break;\n    }\n  };\n\n  // Initiates handleFinish if all questions have been answereed\n  // If not, icreases question number by 1, and sets the currentQuestion so the displayed question changes\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (questionNumber === 3) {\n      return handleFinish();\n    }\n\n    await setQuestionNumber(questionNumber + 1);\n    currentQuestion = questionList[questionNumber];\n  };\n\n  // Calls loadResults function with all input data, then redirects to results page and sends the response as props\n  const handleFinish = async () => {\n    setShowModal(true);\n    let hotelList = await loadResults({\n      firstName,\n      destCity,\n      arriveDate,\n      numberNights,\n    });\n\n    history.push({\n      pathname: '/results',\n      state: { hotelList },\n    });\n  };\n\n  return (\n    <div className='landing-wrapper'>\n      <FormQuestion\n        mainHeader={currentQuestion.mainHeader}\n        secHeader={currentQuestion.secHeader}\n        name={currentQuestion.name}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n        value={currentQuestion.value}\n      />\n      <Modal show={showModal}>\n        <Modal.Header>\n          <Modal.Title>Please wait while we load your results...</Modal.Title>\n        </Modal.Header>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Landing;\n"]},"metadata":{},"sourceType":"module"}