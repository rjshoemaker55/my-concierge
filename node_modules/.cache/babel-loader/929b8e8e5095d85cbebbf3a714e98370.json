{"ast":null,"code":"import _slicedToArray from \"/Users/rjshoemaker/Desktop/Stuff/code/projects/myconcierge/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst getWindowDimensions = () => {\n  const _window = window,\n        width = _window.innerWidth,\n        height = _window.innerHeight;\n  return {\n    width,\n    height\n  };\n};\n\nexport const useWindowDimensions = () => {\n  const _useState = useState(getWindowDimensions()),\n        _useState2 = _slicedToArray(_useState, 2),\n        windowDimensions = _useState2[0],\n        setWindowDimensions = _useState2[1];\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowDimensions(getWindowDimensions());\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return windowDimensions;\n};","map":{"version":3,"sources":["/Users/rjshoemaker/Desktop/Stuff/code/projects/myconcierge/client/src/useWindowDimensions.js"],"names":["useState","useEffect","getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA,kBACmBC,MADnB;AAAA,QACZC,KADY,WACxBC,UADwB;AAAA,QACQC,MADR,WACLC,WADK;AAEhC,SAAO;AACLH,IAAAA,KADK;AAELE,IAAAA;AAFK,GAAP;AAID,CAND;;AAQA,OAAO,MAAME,mBAAmB,GAAG,MAAM;AAAA,oBACSR,QAAQ,CACtDE,mBAAmB,EADmC,CADjB;AAAA;AAAA,QAChCO,gBADgC;AAAA,QACdC,mBADc;;AAKvCT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,YAAY,GAAG,MAAM;AACzBD,MAAAA,mBAAmB,CAACR,mBAAmB,EAApB,CAAnB;AACD,KAFD;;AAIAC,IAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMR,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,GAPQ,EAON,EAPM,CAAT;AASA,SAAOF,gBAAP;AACD,CAfM","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\nexport const useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowDimensions(getWindowDimensions());\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n"]},"metadata":{},"sourceType":"module"}